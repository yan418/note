画布：
	canvas:需要js操作，需要创建上下文对象
	//1. 获取canvas 的对象 
	//2. 创建上下文 对象      var cnt = mycanvas.getContext("2d");
		getContext() 参数 2d  , 3d
			     2d:平面  x,y   两个轴
			     3d:立体  x,y,z 三个轴
	//3. 设置宽高:            <canvas width=""  height="" ></canvas>
	//4. 绘制 fill（） 和 stroke（） 绘制
	
	//   绘制一个矩形  
	     	对象.fillRect(50,50,100,70);  前两个参数 x,y轴坐标  后两个参数 矩形的宽高
		对象.rect(x,y,w,h);       绘制没有默认样式的矩形
		对象.fillRect(x,y,w,h);   绘制有样式的矩形
		对象.strokeRect(x,y,w,h); 绘制描边样式的矩形
		对象.clearRect(x,y,w,h);  清除矩形

	     设置颜色： 在调用之前写
		fillStyle    填充颜色值    例子：对象.fillStyle = "00ff00" ;  
		strokeStyle  描边颜色值    例子：对象.strokeStyle  = "red" ;  
			     描边的宽高设置：    对象.lineWidth = 10 (数值);
		渐变的颜色 使用canvas提供的方法

	//   绘制线段   
		对象.moveTo(x,y)  起点   一个起点可以对应多个终点
		对象.lineTo(x,y)  终点
		需要使用描边方法上颜色。
		
        //   绘制圆
		对象.arc(x,y,r,startAngle,endAngle,布尔值)
		x,y 圆的圆心   r  圆的半径
		startAngle     绘制圆的起始角度
		endAngle       绘制圆的结束角度
		布尔值：       逆时针  false 顺时针   true 逆时针
		Math.PI = 180 度   43度 = 43 * Math.PI/180

	//   重启路径  
		对象.beginPath();  

	//   绘制文本
		对象.font('40px 宋体 ')；
		对象.fillText(文本，x,y,maxLength);      实心字体
		对象.strokeText(文本，x,y,maxLength);    空心字体
		
	//   绘制图形
		 对象.drawImage(img,sx,sy,sw,sh,x,y,w,h);   
		       img          加载图片的对象
  		       sx,sy,sw,sh  是图片裁切的坐标和大小
		       x,y,w,h      图片展示时的坐标和大小
		 单纯展示图片       对象.drawImage（img,x,y）;
		 限制图片大小展示   对象.drawImage（img,x,y,w,h）;
		 裁切后展示         对象.drawImage(img,sx,sy,sw,sh,x,y,w,h);    展示图片某一部分

		例子：var pic = new Image();
		      pic.src = "图片路径";
		      pic.onload = function(){
		      	对象.drawImage（pic ,0,0）;
		      }

	//   图片预加载  ： 实现方法是通过图片的构造函数实现
		Image()  实例化 能得到一个图片对象
		实例化对象有个属性 src 可以绑定路径
		实例化对象有个方法 onload 方法，实现 图片预加载， 异步执行的
		因为是异步的，需要监听：
		      pic.onload = function(){
		      	flag = true;
		      }
		      if(flag){
			 对象.drawImage（pic ,0,0）;
		      }
	
	//   转换
	        缩放:   对象.Scale（x，y）   取值范围0到正无穷 正数是放大  负数是缩写       
	        旋转    对象.Rotate（角度）  以Math.PI 来计算   （Math.PI /6）   
	        位移    对象.Translate（x,y）改变画布的原点的位置，这方法修改原点   
	        透明度  对象.GlobalAlpha     对象.GlobalAlpha = 0.3  取值范围 0 - 1 
                保存和释放画布的状态：
			Save()       保存当前画布的状态       在保存画布状态前使用
			Restore()    释放保存的画布的状态     转换后，想正常使用状态值 调用Restore()

	//    canvas 绑定事件
		 事件绑定到canvas 标签上，触发事件需要找鼠标的 范围。
	         offsetX , offsetY  这组坐标是鼠标相对事件触发对象左上角的坐标。
		 screenX , screenY  这是相对屏幕的坐标
		 例子： 
		 var mycanvas = document.get....("mycanvas");
		 .... 创建上下文  ... 画按钮		 
	         mycanvas.onclick=function(e){
			e = e|| window.event;
			var x = e.offsetX;
			var y = e.offsetY;
			if(x>=200 && x<=250){
			   if(y>=150 && y<=250){
				//触发的事件...
		      	   }
			}
		 }


